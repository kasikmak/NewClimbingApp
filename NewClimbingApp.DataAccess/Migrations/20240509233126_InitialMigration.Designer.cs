// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewClimbingApp.DataAccess;

#nullable disable

namespace NewClimbingApp.DataAccess.Migrations
{
    [DbContext(typeof(NewClimbingAppContext))]
    [Migration("20240509233126_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Ascent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClimberId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClimbed")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("Ascents");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Crag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Crags");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CragId")
                        .HasColumnType("int");

                    b.Property<int?>("EquiperId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("IsClimbed")
                        .HasColumnType("bit");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CragId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RouteUser", b =>
                {
                    b.Property<int>("ClimbersId")
                        .HasColumnType("int");

                    b.Property<int>("RoutesId")
                        .HasColumnType("int");

                    b.HasKey("ClimbersId", "RoutesId");

                    b.HasIndex("RoutesId");

                    b.ToTable("RouteUser");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Ascent", b =>
                {
                    b.HasOne("NewClimbingApp.DataAccess.Entities.Route", null)
                        .WithMany("Ascents")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewClimbingApp.DataAccess.Entities.User", null)
                        .WithMany("Ascents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Route", b =>
                {
                    b.HasOne("NewClimbingApp.DataAccess.Entities.Crag", null)
                        .WithMany("Routes")
                        .HasForeignKey("CragId");
                });

            modelBuilder.Entity("RouteUser", b =>
                {
                    b.HasOne("NewClimbingApp.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ClimbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewClimbingApp.DataAccess.Entities.Route", null)
                        .WithMany()
                        .HasForeignKey("RoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Crag", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.Route", b =>
                {
                    b.Navigation("Ascents");
                });

            modelBuilder.Entity("NewClimbingApp.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Ascents");
                });
#pragma warning restore 612, 618
        }
    }
}
